#!/usr/bin/env janet

(use sh)

(defn- not-a [ch] ~(if-not ,ch 1))

(def- session-pattern
  (peg/compile
    ~{:main (* :name " " :timestamp (? " ") :status)
     :name (<- (some ,(not-a " ")))
     :timestamp (* "[" (some ,(not-a "]")) "]")
     :status (choice
               (/ "(EXITED - attach to resurrect)" :zombie)
               (/ "(current)" :current)
               (/ -1 :active))}))

(defn- sessions []
  "Returns a tuple of [name :status] tuples, where status is one of :zombie, :current, or
  :active"
  (->>
    ($<_ zellij list-sessions -nr)
    (string/split "\n")
    (map |(peg/match session-pattern $))))

(defn- resurrect-all []
  (def zombies
    (map |(match $ [name :zombie] name)
         (filter |(has-value? $ :zombie) (sessions))))
  (pp zombies)
  # resurrect and detach from each zombie session in turn. somehow. if that's possible.
  )

(defn- n-ary?? [n]
  "Define predicates for counting the args passed during script invocation"
  (let [script-name-plus-args-count (+ n 1)]
    (fn [lst] (= script-name-plus-args-count (length lst)))))

(def- no-args? (n-ary?? 0))
(def- single-arg? (n-ary?? 1))

(defn- positional-arg? [arg]
  (unless (string/has-prefix? "-" arg)
    arg))

(defn- choose-interactively []
  (def to-lines |(string/join $ "\n"))
  (when-let [session ($<_ echo ,(to-lines (map |(first $) (sessions))) | fzf)]
    ($ zellij attach ,session)))

(defn- session-exists? [session-name]
  (->> ($<_ zellij list-sessions -s)
       (string/split "\n")
       (find |(= $ session-name))))

(defn- attach-or-create-session [session-name]
  (if (session-exists? session-name)
    ($ zellij attach ,session-name)
    ($ zellij -s ,session-name)))

(defn main [& invocation]
  (match invocation
    ([_] (no-args? invocation)) (choose-interactively)
    [_ "resurrect"] (resurrect-all)
    [_ "ls" & flags] ($ zellij ls ;flags)
    [_ "list-sessions" & flags] ($ zellij ls ;flags)
    ([_ session] (and (single-arg? invocation) (positional-arg? session)))
                 (attach-or-create-session session)
    [_ & args] ($ zellij ;args)))
